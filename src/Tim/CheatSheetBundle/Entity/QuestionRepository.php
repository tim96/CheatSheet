<?php

namespace Tim\CheatSheetBundle\Entity;
use Doctrine\ORM\AbstractQuery;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getListAsArray($isDeleted = false, $isPublish = true)
    {
        $query = $this->getList($isDeleted, $isPublish);

        $data = $query->getQuery()->getResult(AbstractQuery::HYDRATE_ARRAY);
        return count($data) > 0 ? $data : array();
    }

    public function getOneByQuestionQuery($question, $isDeleted = false, $isPublish = true)
    {
        $qb = $this->getList($isDeleted, $isPublish);

        $qb->andWhere('q.question = :question')
            ->setParameter('question', $question)
        ;

        $qb->setMaxResults(1);

        return $qb;
    }

    /**
     * @param bool $isDeleted
     * @param bool $isPublish
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getList($isDeleted = false, $isPublish = true)
    {
        $qb = $this->createQueryBuilder('q');

        if (is_bool($isDeleted)) {
            $qb->andWhere('q.isDeleted != :isDeleted')
                ->setParameter('isDeleted', !$isDeleted);
        }

        if (is_bool($isPublish)) {
            $qb->andWhere('q.isPublish = :isPublic')
                ->setParameter('isPublic', $isPublish);
        }

        $qb->orderBy('q.updatedAt', 'DESC');

        return $qb;
    }
}
